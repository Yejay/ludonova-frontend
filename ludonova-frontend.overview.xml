This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-17T17:53:19.727Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repomix, visit: https://github.com/yamadashy/repomix
</additional_info>

</file_summary>

<repository_structure>
app/
  (protected)/
    dashboard/
      page.tsx
    layout.tsx
  auth/
    login/
      page.tsx
    steam/
      callback/
        page.tsx
  error.tsx
  layout.tsx
  page.tsx
components/
  auth/
    auth-provider.tsx
    login-form.tsx
    steam-button.tsx
  dashboard/
    games-list.tsx
    header.tsx
    nav.tsx
    stats.tsx
  layout/
    header.tsx
  landing-page.tsx
  theme-provider.tsx
hooks/
  use-auth.ts
  use-toast.ts
lib/
  api/
    auth.ts
    client.ts
    games.ts
  utils.ts
providers/
  providers.tsx
styles/
  globals.css
types/
  auth.ts
utils/
  cookies.ts
.eslintrc.json
.gitignore
authentication-overview.md
components.json
middleware.ts
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path="app/(protected)/dashboard/page.tsx">
// app/(protected)/dashboard/page.tsx
'use client'

import { useAuth } from '@/hooks/use-auth'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { LogOut } from 'lucide-react'

export default function DashboardPage() {
  const { user, logout } = useAuth()

  return (
    <div className="container mx-auto p-8">
      <Card>
        <CardHeader>
          <CardTitle>Dashboard</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <h2 className="font-semibold">User Info:</h2>
            <pre className="bg-muted p-4 rounded-lg mt-2">
              {JSON.stringify(user, null, 2)}
            </pre>
          </div>
          <Button onClick={logout} variant="destructive">
            <LogOut className="mr-2 h-4 w-4" />
            Logout
          </Button>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="app/(protected)/layout.tsx">
// app/(protected)/layout.tsx
'use client'

import { useAuth } from '@/hooks/use-auth'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'
import { Loader2 } from 'lucide-react'

export default function ProtectedLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const { isAuthenticated, isLoading } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      router.push('/login')
    }
  }, [isAuthenticated, isLoading, router])

  if (isLoading) {
    return (
      <div className="flex h-screen w-screen items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    )
  }

  return <>{children}</>
}
</file>

<file path="app/auth/login/page.tsx">
// app/(auth)/login/page.tsx
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { SteamButton } from '@/components/auth/steam-button'
import { useAuth } from '@/hooks/use-auth'
import { authApi } from '@/lib/api/auth'
import { Loader2 } from 'lucide-react'
import { useToast } from '@/hooks/use-toast'

export default function LoginPage() {
  const [isLoading, setIsLoading] = useState(false)
  const { login } = useAuth()
  const { toast } = useToast()
  const router = useRouter()

  async function onSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault()
    setIsLoading(true)

    try {
      const formData = new FormData(event.currentTarget)
      const response = await authApi.login({
        username: formData.get('username') as string,
        password: formData.get('password') as string,
      })
      
      login(response.user, response.tokens)
      router.push('/dashboard')
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Invalid username or password',
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="container flex h-screen w-screen flex-col items-center justify-center">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Login to LudoNova</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <form onSubmit={onSubmit} className="space-y-4">
            <Input
              name="username"
              placeholder="Username"
              required
              disabled={isLoading}
            />
            <Input
              name="password"
              type="password"
              placeholder="Password"
              required
              disabled={isLoading}
            />
            <Button className="w-full" type="submit" disabled={isLoading}>
              {isLoading ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                'Sign In'
              )}
            </Button>
          </form>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">
                Or continue with
              </span>
            </div>
          </div>

          <SteamButton />
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="app/auth/steam/callback/page.tsx">
// app/(auth)/steam-callback/page.tsx
'use client'
import { useEffect, useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { useAuth } from '@/hooks/use-auth'
import { authApi } from '@/lib/api/auth'
import { Loader2 } from 'lucide-react'
import { useToast } from '@/hooks/use-toast'

export default function SteamCallbackPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { login } = useAuth()
  const { toast } = useToast()
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    async function handleSteamCallback() {
      try {
        // Log the search params
        console.log('Steam callback params:', 
          Object.fromEntries(searchParams.entries()))
        
        const response = await authApi.handleSteamCallback(searchParams)
        console.log('Steam auth response:', response)
        
        if (!response.tokens || !response.tokens.refreshToken) {
          throw new Error('Invalid authentication response')
        }

        login(response.user, response.tokens)
        router.replace('/dashboard')
      } catch (error) {
        console.error('Steam authentication error:', {
          error,
          message: error instanceof Error ? error.message : 'Unknown error',
          stack: error instanceof Error ? error.stack : undefined
        })
        
        setError('Authentication failed')
        toast({
          title: 'Authentication Failed',
          description: error instanceof Error 
            ? error.message 
            : 'Failed to authenticate with Steam. Please try again.',
          variant: 'destructive',
        })
        setTimeout(() => router.replace('/auth/login'), 2000)
      }
    }

    if (searchParams.size > 0) {
      handleSteamCallback()
    } else {
      setError('Invalid callback parameters')
      router.replace('/auth/login')
    }
  }, [searchParams, login, router, toast])

  if (error) {
    return (
      <div className="flex h-screen w-screen items-center justify-center">
        <div className="text-center space-y-4">
          <p className="text-destructive">{error}</p>
          <p className="text-sm text-muted-foreground">Redirecting to login...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex h-screen w-screen items-center justify-center">
      <div className="text-center space-y-4">
        <Loader2 className="h-8 w-8 animate-spin mx-auto" />
        <p className="text-lg">Authenticating with Steam...</p>
        <p className="text-sm text-muted-foreground">Please wait while we complete your login</p>
      </div>
    </div>
  )
}
</file>

<file path="app/error.tsx">
'use client'
</file>

<file path="app/layout.tsx">
// app/layout.tsx
import { Providers } from '@/providers/providers'
import { Inter } from 'next/font/google'
import '@/styles/globals.css'

const inter = Inter({ subsets: ['latin'] })

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  )
}
</file>

<file path="app/page.tsx">
'use client';

import { useState } from 'react';
import { useAuth } from '@/hooks/use-auth';
import { Button } from "@/components/ui/button";
import ModeToggle from "@/components/ui/mode-toggle";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { 
  Gamepad, 
  Menu, 
  X, 
  GamepadIcon, 
  Library, 
  Star, 
  ListTodo,
  Loader2 
} from "lucide-react";
import Link from "next/link";
import { useRouter } from 'next/navigation';

export default function LandingPage() {
  const [isOpen, setIsOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { isAuthenticated, user } = useAuth();
  const router = useRouter();

  const features = [
    {
      title: "Steam Integration",
      description: "Automatically sync your Steam library and keep track of all your games in one place.",
      icon: <GamepadIcon className="h-8 w-8 mb-4" />,
    },
    {
      title: "Game Library Management",
      description: "Organize your games across different platforms, track your progress, and manage your backlog effectively.",
      icon: <Library className="h-8 w-8 mb-4" />,
    },
    {
      title: "Progress Tracking",
      description: "Keep track of your gaming achievements, completion rates, and time spent on each game.",
      icon: <ListTodo className="h-8 w-8 mb-4" />,
    },
    {
      title: "Game Reviews",
      description: "Rate and review games you've played, and share your gaming experiences with others.",
      icon: <Star className="h-8 w-8 mb-4" />,
    }
  ];

  const handleAuthAction = async () => {
    setIsLoading(true);
    try {
      if (isAuthenticated) {
        router.push('/dashboard');
      } else {
        router.push('/login');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      {/* Navigation */}
      <nav className="bg-background border-b">
        <div className="max-w-7xl mx-auto flex justify-between items-center px-4 py-4">
          {/* Logo Section */}
          <div className="flex items-center space-x-4">
            <Link href="/" className="font-bold text-xl flex items-center">
              <Gamepad className="h-6 w-6 mr-2" />
              LudoNova
            </Link>
          </div>

          {/* Desktop Navigation Links */}
          <div className="hidden md:flex space-x-6">
            <Link 
              href="#features" 
              className="text-foreground/80 hover:text-foreground transition-colors"
            >
              Features
            </Link>
            <Link 
              href="#about" 
              className="text-foreground/80 hover:text-foreground transition-colors"
            >
              About
            </Link>
            <Link 
              href="#contact" 
              className="text-foreground/80 hover:text-foreground transition-colors"
            >
              Contact
            </Link>
          </div>

          {/* Desktop Actions */}
          <div className="hidden md:flex items-center space-x-4">
            {isAuthenticated ? (
              <>
                <Button 
                  variant="ghost"
                  onClick={() => router.push('/dashboard')}
                >
                  Dashboard
                </Button>
                <Button 
                  onClick={() => router.push('/games')}
                  className="flex items-center"
                >
                  <GamepadIcon className="mr-2 h-4 w-4" />
                  My Games
                </Button>
              </>
            ) : (
              <>
                <Link href="/login">
                  <Button variant="ghost">
                    Sign In
                  </Button>
                </Link>
                <Link href="/login">
                  <Button>
                    <GamepadIcon className="mr-2 h-4 w-4" />
                    Connect with Steam
                  </Button>
                </Link>
              </>
            )}
            <ModeToggle />
          </div>

          {/* Mobile Menu Button */}
          <button 
            onClick={() => setIsOpen(!isOpen)} 
            className="md:hidden"
          >
            {isOpen ? (
              <X className="h-6 w-6" />
            ) : (
              <Menu className="h-6 w-6" />
            )}
          </button>
        </div>

        {/* Mobile Menu */}
        {isOpen && (
          <div className="md:hidden p-4 border-t bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
            <div className="space-y-4">
              <Link 
                href="#features" 
                className="block text-foreground/80 hover:text-foreground"
              >
                Features
              </Link>
              <Link 
                href="#about" 
                className="block text-foreground/80 hover:text-foreground"
              >
                About
              </Link>
              <Link 
                href="#contact" 
                className="block text-foreground/80 hover:text-foreground"
              >
                Contact
              </Link>
              <div className="pt-4 space-y-4">
                {isAuthenticated ? (
                  <>
                    <Button 
                      variant="outline" 
                      className="w-full"
                      onClick={() => router.push('/dashboard')}
                    >
                      Dashboard
                    </Button>
                    <Button 
                      className="w-full"
                      onClick={() => router.push('/games')}
                    >
                      <GamepadIcon className="mr-2 h-4 w-4" />
                      My Games
                    </Button>
                  </>
                ) : (
                  <>
                    <Link href="/login" className="block">
                      <Button variant="outline" className="w-full">
                        Sign In
                      </Button>
                    </Link>
                    <Link href="/login" className="block">
                      <Button className="w-full">
                        <GamepadIcon className="mr-2 h-4 w-4" />
                        Connect with Steam
                      </Button>
                    </Link>
                  </>
                )}
                <div className="flex justify-center pt-2">
                  <ModeToggle />
                </div>
              </div>
            </div>
          </div>
        )}
      </nav>

      {/* Hero Section */}
      <section className="bg-gradient-to-b from-background to-muted pt-20 pb-32">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h1 className="text-4xl md:text-6xl font-bold mb-6 animate-in fade-in slide-in-from-bottom-4 duration-1000">
            Manage Your Gaming Journey
          </h1>
          <p className="text-xl md:text-2xl text-muted-foreground mb-12 max-w-3xl mx-auto animate-in fade-in slide-in-from-bottom-8 duration-1000 delay-200">
            Track your progress, manage your backlog, and discover new games across all your gaming platforms.
          </p>
          <div className="flex flex-col sm:flex-row justify-center gap-4 animate-in fade-in slide-in-from-bottom-12 duration-1000 delay-400">
            {isAuthenticated ? (
              <Button 
                size="lg" 
                className="w-full sm:w-auto"
                onClick={() => router.push('/dashboard')}
                disabled={isLoading}
              >
                {isLoading ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <GamepadIcon className="mr-2 h-5 w-5" />
                )}
                Go to Dashboard
              </Button>
            ) : (
              <>
                <Link href="/login" className="w-full sm:w-auto">
                  <Button size="lg" className="w-full">
                    <GamepadIcon className="mr-2 h-5 w-5" />
                    Connect with Steam
                  </Button>
                </Link>
                <Link href="/login" className="w-full sm:w-auto">
                  <Button size="lg" variant="outline" className="w-full">
                    Create Free Account
                  </Button>
                </Link>
              </>
            )}
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-20 bg-muted">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 className="text-3xl font-bold text-center mb-12">
            Everything You Need to Manage Your Games
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {features.map((feature, index) => (
              <Card 
                key={index} 
                className="bg-background transition-all hover:shadow-lg"
              >
                <CardHeader>
                  <CardTitle className="flex flex-col items-center text-center">
                    {feature.icon}
                    {feature.title}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-center text-muted-foreground">
                    {feature.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-background">
        <div className="max-w-4xl mx-auto text-center px-4">
          <h2 className="text-3xl font-bold mb-6">
            Ready to Level Up Your Game Management?
          </h2>
          <p className="text-xl text-muted-foreground mb-8">
            Join thousands of gamers who are already using LudoNova to organize their gaming life.
          </p>
          {isAuthenticated ? (
            <Button 
              size="lg"
              onClick={() => router.push('/dashboard')}
              disabled={isLoading}
            >
              {isLoading ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                'Go to Dashboard'
              )}
            </Button>
          ) : (
            <Link href="/login">
              <Button size="lg">
                Get Started Now
              </Button>
            </Link>
          )}
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-muted py-12 mt-auto">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div className="space-y-4">
              <span className="font-bold text-xl flex items-center">
                <Gamepad className="h-6 w-6 mr-2" />
                LudoNova
              </span>
              <p className="text-sm text-muted-foreground">
                Your ultimate game collection manager.
              </p>
            </div>
            <div>
              <h3 className="font-semibold mb-4">Product</h3>
              <ul className="space-y-2 text-sm text-muted-foreground">
                <li><Link href="#features">Features</Link></li>
                <li><Link href="#pricing">Pricing</Link></li>
                <li><Link href="#about">About</Link></li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold mb-4">Support</h3>
              <ul className="space-y-2 text-sm text-muted-foreground">
                <li><Link href="#faq">FAQ</Link></li>
                <li><Link href="#contact">Contact</Link></li>
                <li><Link href="#help">Help Center</Link></li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold mb-4">Legal</h3>
              <ul className="space-y-2 text-sm text-muted-foreground">
                <li><Link href="/privacy">Privacy Policy</Link></li>
                <li><Link href="/terms">Terms of Service</Link></li>
                <li><Link href="/cookies">Cookie Policy</Link></li>
              </ul>
            </div>
          </div>
          <div className="mt-8 pt-8 border-t text-center text-sm text-muted-foreground">
            © {new Date().getFullYear()} LudoNova. All rights reserved.
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="components/auth/auth-provider.tsx">
// components/auth/auth-provider.tsx
'use client'
import { createContext, useCallback, useMemo, useState, useEffect } from 'react'
import { cookies } from '@/utils/cookies'
import type { User, AuthTokens } from '@/types/auth'

interface AuthContextType {
  user: User | null
  tokens: AuthTokens | null
  login: (user: User, tokens: AuthTokens) => void
  logout: () => void
  isAuthenticated: boolean
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(() => cookies.getUser())
  const [tokens, setTokens] = useState<AuthTokens | null>(() => cookies.getTokens())

  // Initialize state from cookies on mount
  useEffect(() => {
    const savedUser = cookies.getUser()
    const savedTokens = cookies.getTokens()
    
    if (savedUser && savedTokens) {
      setUser(savedUser)
      setTokens(savedTokens)
    }
  }, [])

  const login = useCallback((user: User, tokens: AuthTokens) => {
    setUser(user)
    setTokens(tokens)
    cookies.setUser(user)
    cookies.setTokens(tokens)
  }, [])

  const logout = useCallback(() => {
    setUser(null)
    setTokens(null)
    cookies.clearAuth()
  }, [])

  const value = useMemo(
    () => ({
      user,
      tokens,
      login,
      logout,
      isAuthenticated: !!user && !!tokens,
    }),
    [user, tokens, login, logout]
  )

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}
</file>

<file path="components/auth/login-form.tsx">
// components/auth/login-form.tsx
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { useAuth } from '@/hooks/use-auth'
import { authApi } from '@/lib/api/auth'
import { useToast } from '@/hooks/use-toast'

export function LoginForm() {
  const [isLoading, setIsLoading] = useState(false)
  const { login } = useAuth()
  const { toast } = useToast()
  const router = useRouter()

  async function onSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault()
    setIsLoading(true)
  
    try {
      const formData = new FormData(event.currentTarget)
      const response = await authApi.login({
        username: formData.get('username') as string,
        password: formData.get('password') as string,
      })
  
      login(response.user, response.tokens)
  
      // Get redirect URL from query params or default to dashboard
      const params = new URLSearchParams(window.location.search)
      const redirectTo = params.get('redirect') || '/dashboard'
      router.replace(redirectTo)
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Invalid username or password',
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <form onSubmit={onSubmit} className="space-y-4">
      <div className="space-y-2">
        <Input
          id="username"
          name="username"
          placeholder="Username"
          required
          disabled={isLoading}
        />
      </div>
      <div className="space-y-2">
        <Input
          id="password"
          name="password"
          type="password"
          placeholder="Password"
          required
          disabled={isLoading}
        />
      </div>
      <Button className="w-full" type="submit" disabled={isLoading}>
        {isLoading ? 'Loading...' : 'Sign In'}
      </Button>
    </form>
  )
}
</file>

<file path="components/auth/steam-button.tsx">
// components/auth/steam-button.tsx
'use client'
import { useState } from 'react'
import Image from 'next/image'
import { authApi } from '@/lib/api/auth'
import { useToast } from '@/hooks/use-toast'
import { Loader2 } from 'lucide-react'

export function SteamButton() {
  const [isLoading, setIsLoading] = useState(false)
  const { toast } = useToast()

  async function handleSteamLogin() {
    if (isLoading) return
    setIsLoading(true)
    try {
      const { url } = await authApi.getSteamAuthUrl()
      window.location.href = url
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to initiate Steam login',
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-[35px] bg-[#262626] rounded">
        <Loader2 className="h-5 w-5 animate-spin text-white" />
      </div>
    )
  }

  return (
    <button
      onClick={handleSteamLogin}
      className="w-full transition-opacity hover:opacity-90 focus:opacity-90"
      style={{ height: 35 }}
    >
      <Image
        src="https://steamcommunity.com/public/images/signinthroughsteam/sits_01.png"
        alt="Sign in through Steam"
        width={180}
        height={35}
        priority
        className="mx-auto"
      />
    </button>
  )
}
</file>

<file path="components/dashboard/games-list.tsx">
// components/dashboard/games-list.tsx
'use client'

import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'

export function GamesList() {
  const games = [
    {
      id: 1,
      title: 'The Last of Us Part I',
      platform: 'Steam',
      status: 'Playing',
      progress: 65,
    },
    {
      id: 2,
      title: 'God of War Ragnarök',
      platform: 'PlayStation',
      status: 'Completed',
      progress: 100,
    },
    // Add more games as needed
  ]

  return (
    <Card>
      <CardHeader>
        <CardTitle>Recent Games</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {games.map((game) => (
            <div
              key={game.id}
              className="flex items-center justify-between p-4 border rounded-lg"
            >
              <div className="space-y-1">
                <p className="font-medium">{game.title}</p>
                <div className="flex items-center space-x-2">
                  <Badge variant="secondary">{game.platform}</Badge>
                  <Badge>{game.status}</Badge>
                </div>
              </div>
              <div className="w-32">
                <Progress value={game.progress} />
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="components/dashboard/header.tsx">
// components/dashboard/header.tsx
'use client'

import { useAuth } from '@/hooks/use-auth'
import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Gamepad, LogOut, User } from 'lucide-react'
import Link from 'next/link'
import ModeToggle from '../ui/mode-toggle'

export function DashboardHeader() {
  const { user, logout } = useAuth()

  return (
    <header className="border-b">
      <div className="flex h-16 items-center px-4">
        <Link href="/" className="flex items-center space-x-2">
          <Gamepad className="h-6 w-6" />
          <span className="font-bold">LudoNova</span>
        </Link>
        <div className="ml-auto flex items-center space-x-4">
          <ModeToggle />
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                <Avatar className="h-8 w-8">
                  <AvatarImage 
                    src={user?.steamUser?.avatarUrl} 
                    alt={user?.username} 
                  />
                  <AvatarFallback>
                    {user?.username?.charAt(0).toUpperCase()}
                  </AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end" forceMount>
              <DropdownMenuLabel className="font-normal">
                <div className="flex flex-col space-y-1">
                  <p className="text-sm font-medium leading-none">
                    {user?.steamUser?.personaName || user?.username}
                  </p>
                  <p className="text-xs leading-none text-muted-foreground">
                    {user?.email}
                  </p>
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem asChild>
                <Link href="/profile">
                  <User className="mr-2 h-4 w-4" />
                  Profile
                </Link>
              </DropdownMenuItem>
              <DropdownMenuItem onClick={logout}>
                <LogOut className="mr-2 h-4 w-4" />
                Log out
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  )
}
</file>

<file path="components/dashboard/nav.tsx">
// components/dashboard/nav.tsx
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { cn } from '@/lib/utils'
import {
  Gamepad,
  LayoutDashboard,
  Library,
  ListTodo,
  Star,
} from 'lucide-react'

const navigation = [
  {
    name: 'Dashboard',
    href: '/dashboard',
    icon: LayoutDashboard,
  },
  {
    name: 'Games',
    href: '/games',
    icon: Gamepad,
  },
  {
    name: 'Library',
    href: '/library',
    icon: Library,
  },
  {
    name: 'Backlog',
    href: '/backlog',
    icon: ListTodo,
  },
  {
    name: 'Reviews',
    href: '/reviews',
    icon: Star,
  },
]

export function DashboardNav() {
  const pathname = usePathname()

  return (
    <nav className="w-64 min-h-[calc(100vh-4rem)] border-r bg-muted/40 p-4">
      <div className="space-y-2">
        {navigation.map((item) => {
          const Icon = item.icon
          return (
            <Link
              key={item.name}
              href={item.href}
              className={cn(
                'flex items-center space-x-3 rounded-lg px-3 py-2 text-sm font-medium hover:bg-accent',
                pathname === item.href ? 'bg-accent' : 'transparent'
              )}
            >
              <Icon className="h-5 w-5" />
              <span>{item.name}</span>
            </Link>
          )
        })}
      </div>
    </nav>
  )
}
</file>

<file path="components/dashboard/stats.tsx">
// components/dashboard/stats.tsx
'use client'

import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '@/components/ui/card'
import { Gamepad, Trophy, Clock, Star } from 'lucide-react'

export function DashboardStats() {
  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-8">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Total Games</CardTitle>
          <Gamepad className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">42</div>
          <p className="text-xs text-muted-foreground">Across all platforms</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Completed</CardTitle>
          <Trophy className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">18</div>
          <p className="text-xs text-muted-foreground">+2 this month</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Play Time</CardTitle>
          <Clock className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">247h</div>
          <p className="text-xs text-muted-foreground">+12h from last week</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Avg Rating</CardTitle>
          <Star className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">4.2</div>
          <p className="text-xs text-muted-foreground">Based on your reviews</p>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="components/layout/header.tsx">
// components/layout/header.tsx
'use client'

import Link from 'next/link'
import { useAuth } from '@/hooks/use-auth'
import { Button } from '@/components/ui/button'

export function Header() {
  const { isAuthenticated, logout } = useAuth()

  return (
    <header className="w-full border-b">
      <div className="container flex h-16 items-center justify-between">
        <Link href="/" className="flex items-center space-x-2">
          <span className="text-2xl font-bold">LudoNova</span>
        </Link>
        <nav className="flex items-center space-x-4">
          {isAuthenticated ? (
            <>
              <Link href="/dashboard">
                <Button variant="ghost">Dashboard</Button>
              </Link>
              <Link href="/games">
                <Button variant="ghost">Games</Button>
              </Link>
              <Button onClick={() => logout()} variant="outline">
                Sign Out
              </Button>
            </>
          ) : (
            <Link href="/login">
              <Button>Sign In</Button>
            </Link>
          )}
        </nav>
      </div>
    </header>
  )
}
</file>

<file path="components/landing-page.tsx">
'use client';

import { useState } from 'react';
import { Button } from "@/components/ui/button";
import ModeToggle from "@/components/ui/mode-toggle";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Gamepad, Menu, X, GamepadIcon, Library, Star, ListTodo } from "lucide-react";
import Link from "next/link";

export default function LandingPage() {
  const [isOpen, setIsOpen] = useState(false);

  const features = [
    {
      title: "Steam Integration",
      description: "Automatically sync your Steam library and keep track of all your games in one place.",
      icon: <GamepadIcon className="h-8 w-8 mb-4" />,
    },
    {
      title: "Game Library Management",
      description: "Organize your games across different platforms, track your progress, and manage your backlog effectively.",
      icon: <Library className="h-8 w-8 mb-4" />,
    },
    {
      title: "Progress Tracking",
      description: "Keep track of your gaming achievements, completion rates, and time spent on each game.",
      icon: <ListTodo className="h-8 w-8 mb-4" />,
    },
    {
      title: "Game Reviews",
      description: "Rate and review games you've played, and share your gaming experiences with others.",
      icon: <Star className="h-8 w-8 mb-4" />,
    }
  ];

  return (
    <div className="min-h-screen flex flex-col">
      {/* Navigation */}
      <nav className="bg-white dark:bg-zinc-950 p-4 shadow-md">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          {/* Logo Section */}
          <div className="flex items-center space-x-4">
            <Link href="/" className="font-bold text-xl text-black dark:text-white flex items-center">
              <Gamepad className="h-6 w-6 mr-2" />
              LudoNova
            </Link>
          </div>

          {/* Desktop Navigation Links */}
          <div className="hidden md:flex space-x-6">
            <Link href="#features" className="text-black dark:text-white hover:text-gray-600 dark:hover:text-gray-300">
              Features
            </Link>
            <Link href="#about" className="text-black dark:text-white hover:text-gray-600 dark:hover:text-gray-300">
              About
            </Link>
            <Link href="#contact" className="text-black dark:text-white hover:text-gray-600 dark:hover:text-gray-300">
              Contact
            </Link>
          </div>

          {/* Desktop Actions */}
          <div className="hidden md:flex items-center space-x-4">
            <Link href="/login">
              <Button variant="outline" className="text-black dark:text-white border-black dark:border-white hover:bg-gray-200 dark:hover:bg-gray-800">
                Sign In
              </Button>
            </Link>
            <Link href="/login">
              <Button>
                <GamepadIcon className="mr-2 h-4 w-4" />
                Connect with Steam
              </Button>
            </Link>
            <ModeToggle />
          </div>

          {/* Mobile Menu Button */}
          <button 
            onClick={() => setIsOpen(!isOpen)} 
            className="md:hidden"
          >
            {isOpen ? (
              <X className="h-6 w-6 text-black dark:text-white" />
            ) : (
              <Menu className="h-6 w-6 text-black dark:text-white" />
            )}
          </button>
        </div>

        {/* Mobile Menu */}
        {isOpen && (
          <div className="md:hidden mt-4 space-y-4 p-4">
            <Link href="#features" className="block text-black dark:text-white hover:text-gray-600 dark:hover:text-gray-300">
              Features
            </Link>
            <Link href="#about" className="block text-black dark:text-white hover:text-gray-600 dark:hover:text-gray-300">
              About
            </Link>
            <Link href="#contact" className="block text-black dark:text-white hover:text-gray-600 dark:hover:text-gray-300">
              Contact
            </Link>
            <div className="pt-4 space-y-4">
              <Link href="/login">
                <Button variant="outline" className="w-full">
                  Sign In
                </Button>
              </Link>
              <Link href="/login">
                <Button className="w-full">
                  <GamepadIcon className="mr-2 h-4 w-4" />
                  Connect with Steam
                </Button>
              </Link>
              <div className="flex justify-center pt-2">
                <ModeToggle />
              </div>
            </div>
          </div>
        )}
      </nav>

      {/* Hero Section */}
      <section className="bg-gradient-to-b from-background to-muted pt-20 pb-32">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h1 className="text-4xl md:text-6xl font-bold mb-6">
            Manage Your Gaming Journey
          </h1>
          <p className="text-xl md:text-2xl text-muted-foreground mb-12 max-w-3xl mx-auto">
            Track your progress, manage your backlog, and discover new games across all your gaming platforms.
          </p>
          <div className="flex flex-col sm:flex-row justify-center gap-4">
            <Link href="/login">
              <Button size="lg" className="w-full sm:w-auto">
                <GamepadIcon className="mr-2 h-5 w-5" />
                Connect with Steam
              </Button>
            </Link>
            <Link href="/login">
              <Button size="lg" variant="outline" className="w-full sm:w-auto">
                Create Free Account
              </Button>
            </Link>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-20 bg-muted">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 className="text-3xl font-bold text-center mb-12">
            Everything You Need to Manage Your Games
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {features.map((feature, index) => (
              <Card key={index} className="bg-background">
                <CardHeader>
                  <CardTitle className="flex flex-col items-center text-center">
                    {feature.icon}
                    {feature.title}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-center text-muted-foreground">
                    {feature.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-background">
        <div className="max-w-4xl mx-auto text-center px-4">
          <h2 className="text-3xl font-bold mb-6">
            Ready to Level Up Your Game Management?
          </h2>
          <p className="text-xl text-muted-foreground mb-8">
            Join thousands of gamers who are already using LudoNova to organize their gaming life.
          </p>
          <Link href="/login">
            <Button size="lg">
              Get Started Now
            </Button>
          </Link>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-zinc-950 text-white p-8">
        <div className="max-w-7xl mx-auto flex flex-col md:flex-row justify-between items-center">
          <div className="mb-8 md:mb-0">
            <span className="font-bold text-xl flex items-center">
              <Gamepad className="h-6 w-6 mr-2" />
              LudoNova
            </span>
          </div>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-8 text-sm">
            <div>
              <h3 className="font-semibold mb-4">Product</h3>
              <ul className="space-y-2">
                <li><Link href="#features" className="hover:text-gray-300">Features</Link></li>
                <li><Link href="#pricing" className="hover:text-gray-300">Pricing</Link></li>
                <li><Link href="#about" className="hover:text-gray-300">About</Link></li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold mb-4">Support</h3>
              <ul className="space-y-2">
                <li><Link href="#faq" className="hover:text-gray-300">FAQ</Link></li>
                <li><Link href="#contact" className="hover:text-gray-300">Contact</Link></li>
                <li><Link href="#help" className="hover:text-gray-300">Help Center</Link></li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold mb-4">Legal</h3>
              <ul className="space-y-2">
                <li><Link href="/privacy" className="hover:text-gray-300">Privacy Policy</Link></li>
                <li><Link href="/terms" className="hover:text-gray-300">Terms of Service</Link></li>
                <li><Link href="/cookies" className="hover:text-gray-300">Cookie Policy</Link></li>
              </ul>
            </div>
          </div>
        </div>
        <div className="max-w-7xl mx-auto mt-8 pt-8 border-t border-zinc-800 text-center text-sm text-zinc-400">
          © {new Date().getFullYear()} LudoNova. All rights reserved.
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="components/theme-provider.tsx">
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
</file>

<file path="hooks/use-auth.ts">
// hooks/use-auth.ts
'use client'

import { useContext } from 'react'
import { AuthContext } from '@/components/auth/auth-provider'

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}
</file>

<file path="hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="lib/api/auth.ts">
// lib/api/auth.ts
import { api } from './client'
import type { AuthResponse, LoginCredentials } from '@/types/auth'

export const authApi = {
  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {
    const response = await api.post<AuthResponse>('/auth/login', credentials)
    return response.data
  },

  getSteamAuthUrl: async (): Promise<{ url: string }> => {
    const response = await api.get<{ url: string }>('/auth/steam/login')
    return response.data
  },

  handleSteamCallback: async (params: URLSearchParams): Promise<AuthResponse> => {
    try {
      console.log('Steam callback params:', Object.fromEntries(params))
      const response = await api.get<AuthResponse>('/auth/steam/return', {
        params: Object.fromEntries(params)
      })
      console.log('Steam auth response:', response.data)
      return response.data
    } catch (error) {
      // Better error logging
      if (axios.isAxiosError(error)) {
        console.error('Steam API error:', {
          status: error.response?.status,
          data: error.response?.data,
          message: error.message
        })
      } else {
        console.error('Steam callback error:', error)
      }
      throw error
    }
  }
}
</file>

<file path="lib/api/client.ts">
// lib/api/client.ts
import axios from 'axios'
import type { AuthTokens } from '@/types/auth'

export const api = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/api',
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true
})

// Add a request interceptor to add the auth token
api.interceptors.request.use((config) => {
  // Don't add auth headers for Steam auth endpoints
  if (config.url?.includes('/auth/steam')) {
    return config;
  }

  const tokens = localStorage.getItem('auth-tokens')
  if (tokens) {
    const { accessToken } = JSON.parse(tokens) as AuthTokens
    config.headers.Authorization = `Bearer ${accessToken}`
  }
  return config
})

// Add a response interceptor to handle token refresh
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config
    
    // Don't attempt refresh for Steam auth endpoints
    if (originalRequest.url?.includes('/auth/steam')) {
      return Promise.reject(error)
    }

    // If the error is 401 and we haven't tried to refresh the token yet
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true
      try {
        const tokens = localStorage.getItem('auth-tokens')
        if (!tokens) {
          throw new Error('No refresh token available')
        }
        const { refreshToken } = JSON.parse(tokens) as AuthTokens
        const response = await api.post<AuthTokens>('/auth/refresh', { refreshToken })
        
        // Save the new tokens
        localStorage.setItem('auth-tokens', JSON.stringify(response.data))
        
        // Update the original request with the new token
        originalRequest.headers.Authorization = `Bearer ${response.data.accessToken}`
        return api(originalRequest)
      } catch (refreshError) {
        // Handle refresh token failure (e.g., redirect to login)
        window.location.href = '/auth/login'
        return Promise.reject(refreshError)
      }
    }
    return Promise.reject(error)
  }
)

export default api
</file>

<file path="lib/api/games.ts">
import api from './client';
import type { Game, GameCreateInput, GameUpdateInput } from './types';

export const games = {
  list: async (): Promise<Game[]> => {
    const response = await api.get<Game[]>('/games');
    return response.data;
  },
  get: async (id: string): Promise<Game> => {
    const response = await api.get<Game>(`/games/${id}`);
    return response.data;
  },
  create: async (data: GameCreateInput): Promise<Game> => {
    const response = await api.post<Game>('/games', data);
    return response.data;
  },
  update: async (id: string, data: GameUpdateInput): Promise<Game> => {
    const response = await api.put<Game>(`/games/${id}`, data);
    return response.data;
  },
  delete: async (id: string): Promise<void> => {
    await api.delete(`/games/${id}`);
  },
};
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="providers/providers.tsx">
// providers/providers.tsx
'use client'

import { AuthProvider } from '@/components/auth/auth-provider'
import { ThemeProvider } from 'next-themes'
import { Toaster } from '@/components/ui/toaster'

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <ThemeProvider
      attribute="class"
      defaultTheme="system"
      enableSystem
      disableTransitionOnChange
    >
      <AuthProvider>
        {children}
        <Toaster />
      </AuthProvider>
    </ThemeProvider>
  )
}
</file>

<file path="styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="types/auth.ts">
// types/auth.ts
export interface User {
    id: number
    username: string
    email: string | null
    steamUser?: {
      steamId: string
      personaName: string
      profileUrl: string
      avatarUrl: string
    }
  }
  
  export interface AuthTokens {
    accessToken: string
    refreshToken: string
    tokenType: string
    expiresIn: number
  }
  
  export interface AuthResponse {
    tokens: AuthTokens
    user: User
  }
  
  export interface LoginCredentials {
    username: string
    password: string
  }
</file>

<file path="utils/cookies.ts">
// utils/cookies.ts
import Cookies from 'js-cookie'
import type { AuthTokens, User } from '@/types/auth'

export const STORAGE_KEYS = {
  AUTH_TOKENS: 'auth-tokens',
  USER: 'auth-user'
} as const

export const cookies = {
  setTokens: (tokens: AuthTokens) => {
    Cookies.set(STORAGE_KEYS.AUTH_TOKENS, JSON.stringify(tokens), {
      expires: 30, // 30 days
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax'
    })
  },

  setUser: (user: User) => {
    Cookies.set(STORAGE_KEYS.USER, JSON.stringify(user), {
      expires: 30,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax'
    })
  },

  getTokens: (): AuthTokens | null => {
    const tokens = Cookies.get(STORAGE_KEYS.AUTH_TOKENS)
    return tokens ? JSON.parse(tokens) : null
  },

  getUser: (): User | null => {
    const user = Cookies.get(STORAGE_KEYS.USER)
    return user ? JSON.parse(user) : null
  },

  clearAuth: () => {
    Cookies.remove(STORAGE_KEYS.AUTH_TOKENS)
    Cookies.remove(STORAGE_KEYS.USER)
  }
}
</file>

<file path=".eslintrc.json">
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}
</file>

<file path=".gitignore">
# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem
.env*.local
.env

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# IDE
.idea/
.vscode/
*.swp
*.swo

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
</file>

<file path="authentication-overview.md">
# LudoNova Authentication System Documentation

## Overview

The LudoNova application uses a JWT (JSON Web Token) based authentication system with a React/Next.js frontend and Spring Boot backend. The system implements stateless authentication where the client stores the JWT token and sends it with each request.

## Backend Implementation

### 1. JWT Token Provider

The backend uses a dedicated JWT token provider service to handle token operations:

```java
package com.bht.ludonova.security;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import javax.crypto.SecretKey;
import java.util.Date;
import java.nio.charset.StandardCharsets;

@Component
public class JwtTokenProvider {

    private final SecretKey key;
    private final int jwtExpirationInMs;

    public JwtTokenProvider(
            @Value("${jwt.secret}") String jwtSecret,
            @Value("${jwt.expiration}") int jwtExpirationInMs) {
        this.key = Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));
        this.jwtExpirationInMs = jwtExpirationInMs;
    }

    public String generateToken(String username) {
        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + jwtExpirationInMs);

        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(expiryDate)
                .signWith(key)
                .compact();
    }

    public String getUsernameFromJWT(String token) {
        Claims claims = Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody();

        return claims.getSubject();
    }

    public boolean validateToken(String authToken) {
        try {
            Jwts.parserBuilder()
                    .setSigningKey(key)
                    .build()
                    .parseClaimsJws(authToken);
            return true;
        } catch (JwtException | IllegalArgumentException ex) {
            return false;
        }
    }
}
```

**Key Features:**
- Generates JWT tokens with configurable expiration
- Validates tokens
- Extracts username from tokens
- Uses HMAC-SHA for token signing

### 2. Authentication Filter

The JWT authentication filter intercepts all requests:

```java
package com.bht.ludonova.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    @Autowired
    private JwtTokenProvider tokenProvider;

    @Autowired
    private CustomUserDetailsService customUserDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        try {
            String jwt = getJwtFromRequest(request);

            if (StringUtils.hasText(jwt) && tokenProvider.validateToken(jwt)) {
                String username = tokenProvider.getUsernameFromJWT(jwt);
                UserDetails userDetails = customUserDetailsService.loadUserByUsername(username);

                UsernamePasswordAuthenticationToken authentication =
                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                SecurityContextHolder.getContext().setAuthentication(authentication);
            }
        } catch (Exception ex) {
            logger.error("Could not set user authentication in security context", ex);
        }

        filterChain.doFilter(request, response);
    }
}
```

**Process:**
- Extracts JWT from request header
- Validates token
- Loads user details
- Sets authentication in Spring Security context

### 3. Security Configuration

The Spring Security configuration defines security rules and authentication setup:

```java
package com.bht.ludonova.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfigurationSource;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final CustomUserDetailsService userDetailsService;
    private final JwtAuthenticationFilter jwtAuthFilter;
    private final CorsConfigurationSource corsConfigurationSource;

    public SecurityConfig(
            CustomUserDetailsService userDetailsService,
            JwtAuthenticationFilter jwtAuthFilter,
            CorsConfigurationSource corsConfigurationSource) {
        this.userDetailsService = userDetailsService;
        this.jwtAuthFilter = jwtAuthFilter;
        this.corsConfigurationSource = corsConfigurationSource;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http
                .cors(cors -> cors.configurationSource(corsConfigurationSource))
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/api/auth/**").permitAll()
                        .requestMatchers("/api/games/**").authenticated()
                        .requestMatchers("/api/user").authenticated()
                        .anyRequest().authenticated()
                )
                .sessionManagement(session -> session
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                )
                .authenticationProvider(authenticationProvider())
                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class)
                .build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}
```

**Features:**
- Configures CORS
- Defines public and protected endpoints
- Sets up authentication provider
- Configures password encoding

## Frontend Implementation

### 1. Authentication Context

The frontend uses React Context for global authentication state:

```javascript
'use client';

import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import axios from 'axios';

// Create axios instance with default config
const api = axios.create({
  baseURL: 'http://localhost:8080',
  headers: {
    'Content-Type': 'application/json'
  }
});

// Add interceptor to add token to all requests
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Types
interface User {
  id: string;
  username: string;
  email: string;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  error: string | null;
  login: (username: string, password: string) => Promise<boolean>;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const login = async (username: string, password: string): Promise<boolean> => {
    try {
      setError(null);
      const response = await api.post('/api/auth/login', {
        username,
        password
      });
      
      const { token } = response.data;
      localStorage.setItem('token', token);
      
      await fetchUser();
      return true;
    } catch (err) {
      console.error('Login error:', err);
      setError('Invalid username or password');
      return false;
    }
  };

  const fetchUser = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setLoading(false);
        return;
      }

      const response = await api.get('/api/user');
      setUser(response.data);
    } catch (err) {
      console.error('Failed to fetch user:', err);
      localStorage.removeItem('token');
    } finally {
      setLoading(false);
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
  };

  useEffect(() => {
    fetchUser();
  }, []);

  return (
    <AuthContext.Provider value={{ user, loading, error, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
```

**Features:**
- Manages user authentication state
- Provides login/logout functions
- Handles token storage
- Exposes authentication status to components

### 2. API Client

A configured Axios instance handles API requests:

```javascript
import axios, { InternalAxiosRequestConfig } from 'axios';

const api = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor for adding auth token
api.interceptors.request.use((config: InternalAxiosRequestConfig) => {
  const token = localStorage.getItem('token');
  if (token && config.headers) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Response interceptor for handling errors
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default api;
```

**Features:**
- Automatically adds JWT token to requests
- Handles 401 unauthorized responses
- Redirects to login on authentication failures

### 3. Protected Routes

The application implements route protection:

```javascript
import { useAuth } from '@/lib/auth';
import { useRouter } from 'next/router';
import { useEffect, ReactNode } from 'react';

interface ProtectedRouteProps {
  children: ReactNode;
}

export default function ProtectedRoute({ children }: ProtectedRouteProps) {
  const { user, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !user) {
      router.push('/login');
    }
  }, [user, loading, router]);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  return user ? children : null;
}
```

**Features:**
- Prevents access to protected routes for unauthenticated users
- Shows loading state during authentication check
- Redirects to login page when needed

## Authentication Flow

### Login Process:
1. User submits credentials via login form
2. Backend validates credentials and generates JWT
3. Frontend stores JWT in `localStorage`
4. User state is updated in `AuthContext`

### Protected Route Access:
1. User attempts to access protected route
2. `ProtectedRoute` component checks authentication status
3. Redirects to login if unauthenticated
4. Allows access if authenticated

### API Requests:
1. Axios interceptor adds JWT to request headers
2. Backend filter validates JWT
3. Request proceeds if token is valid
4. `401` response triggers logout if token is invalid

## Configuration

### Backend Configuration

JWT settings in `application.properties`:

```properties
# JWT Configuration (longer secret key for HS512)
jwt.secret=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
jwt.expiration=86400000
```

### Frontend Configuration

Environment variables for API configuration:

```env
NEXT_PUBLIC_API_URL=http://localhost:8080/api
```

## Security Considerations

### Token Storage:
- Tokens are stored in `localStorage`
- Consider using `httpOnly` cookies for enhanced security

### CORS Configuration:
- Backend is configured to accept requests only from frontend origin
- Specific HTTP methods and headers are allowed

### Password Security:
- Passwords are hashed using BCrypt
- Never stored in plain text

### Token Expiration:
- JWTs have a configurable expiration time
- Frontend handles token expiration gracefully

This authentication system provides a secure and scalable solution for the LudoNova application while maintaining a good balance between security and user experience.
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="middleware.ts">
// middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

const publicPaths = [
  '/', 
  '/auth/login',
  '/auth/steam/callback'
]

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl

  if (publicPaths.includes(pathname) || 
      pathname.startsWith('/api/') || 
      pathname.startsWith('/_next/')) {
    return NextResponse.next()
  }

  const hasAuthTokens = request.cookies.has('auth-tokens')

  if (!hasAuthTokens) {
    const loginUrl = new URL('/auth/login', request.url)
    loginUrl.searchParams.set('redirect', pathname)
    return NextResponse.redirect(loginUrl)
  }

  return NextResponse.next()
}
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {
	images: {
		remotePatterns: [
			{
				protocol: 'https',
				hostname: 'steamcommunity.com',
				pathname: '/public/images/signinthroughsteam/**',
			},
		],
	},
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "ludonova-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.2",
    "@tanstack/react-query": "^5.59.20",
    "axios": "^1.7.7",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "js-cookie": "^3.0.5",
    "jwt-decode": "^4.0.0",
    "lucide-react": "^0.456.0",
    "next": "^15.0.3",
    "next-themes": "^0.4.3",
    "react": "^18",
    "react-dom": "^18",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/js-cookie": "^3.0.6",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.16",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

# LudoNova Frontend

A modern game backlog manager built with Next.js 14 and TypeScript.

## Prerequisites

- Node.js 18+
- npm or yarn

## Getting Started

1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/ludonova-frontend.git
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Create a .env.local file:
   ```
   NEXT_PUBLIC_API_URL=http://localhost:8080/api
   ```

4. Start the development server:
   ```bash
   npm run dev
   ```

## Available Scripts

- `npm run dev`: Start development server
- `npm run build`: Build for production
- `npm run start`: Start production server
- `npm run lint`: Run ESLint
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./*"
      ]
    },
    "target": "ES2017"
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
</file>

</repository_files>
